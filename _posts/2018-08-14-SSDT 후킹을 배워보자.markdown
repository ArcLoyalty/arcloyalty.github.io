---
layout: post
title: "커널 모드로 들어가다"
comments: true
---

# 커널 모드에 접근해보고 SSDT 후킹에 대해 접근해보자


## 0. 이런 기술에 대해 접근한 이유는?

오랜만입니다. ArcLoyalty(OutdoorFrog)입니다.
저번에 자기 소개 이후로 제가 SSDT 후킹에 대한 글로 여러분을 뵙는다 말씀드렸습니다.
제가 생각하는 시스템을 공부하는 사람이라면 조건을 만족하는 사람이 이상형이라고 생각했습니다.

##### 이상적인 사람

> 1. 커널 모드에 접근할 수 있다.
> 2. 리버싱이라는 기술에 대해서 많은 지식을 가지고 있다.
> 3. CTF 문제에 대해서 `여포`처럼은 아니더라도 대회에서 나온 3문제 이상은 풀 수 있다.

이런 이상형이 되기 위해서 일단 첫 번째 조건부터 충족시키기로 했습니다.

## 1. 사전 준비

컴퓨터의 역할은 `Kernel Debugee` 와 `Kernel Debuger`로 나뉘어야 됩니다.

`Vmware Workstation 12 Pro`를 써서 Guest Comptuer(`Kernel Debugee`)를 구성해봅시다.

### 1.1 Guest Computer(Debugee)

##### 1) Guest Computer 환경

![게스트 컴퓨터 환경](D:\Git Blog\_posts\커널 단으로 들어가다 이미지\게스트 컴퓨터 환경.png)

##### 2) 사진 안보이는 분들을 위한 Setting 설명

> Memory : 2GB (이 정도는 해야 렉이 좀 덜 걸리더라구요.)
> Processors : 1 (Default)
> Hard Disk(SCSI) : 40GB (음.. 솔직히 20GB로 잡아도 괜찮습니다.)
> Network Adapter : NAT (Default)
> USB Controller : Present (Default)
> Sound Card : Default(제거해도 괜찮습니다, 개인적인 이유로 전 제거하지 않았습니다.)
> Printer : Present (제거해도 괜찮습니다, 프린터 드라이버 만들어볼 생각 아닌 이상 제거합시다.)
> Serial Port2 : Using named pipe : \\.\pipe\Windows7 (뒤에서 언급하겠습니다.)
> Display : Auto detect (Default)
> Windows 7, 32bit 인 Iso 파일을 찾아서 환경을 구성하셔야 됩니다.

##### 3) Serial Port Settings

우리는 `WinDBG`를 써서 커널 디버깅을 하는데 컴퓨터가 바로 연결되 있는 것도 아니고 연결 매체가 없지 않습니까?
그래서 우리는 `Serial Port`를 추가해줘야 합니다.

##### 4) Serial Port Setting 과정

> 1. Serial Port 추가
> 2. Port Type를 Output to named pipe 선택
> 3. Named pipe : \\.\pipe\Windows7 이라고 설정해주고 나머지는 Default로 해줍시다.

##### 5) Sysconfig 와 cmd 명령어를 이용한 멀티부팅 설정

> 1. [Windows] + R 버튼을 입력해서 실행창을 열으세요.
> 2. [부팅] 탭에 [고급 옵션]으로 들어가세요
> 3. 디버그 체크, 디버그 포트 COM1 ~ COM4를 선택(상황에 맞게)
> 4. 재부팅하세요.

저는 COM2로 설정했는데 Serial Port [숫자] 에 따라서 COM[숫자]를 판단해주시면 될 것 같습니다.

### 1.2 Host Computer(Debugger)

#### 1) 개발 환경

> [Visual Studio 2017 Community](https://visualstudio.microsoft.com/ko/?rr=https%3A%2F%2Fwww.google.co.kr%2F)
> [Winodws Driver Kit](https://docs.microsoft.com/ko-kr/windows-hardware/drivers/download-the-wdk)
> [WinDBG](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools)
> [Dbgview](https://docs.microsoft.com/en-us/sysinternals/downloads/debugview)

`Visual Studio`는 루트킷 드라이버를 개발하기 위해서 반드시 필요한 IDE 입니다. 반드시 설치해주셔야합니다.
`Windows Driver Kit`는 드라이버를 개발하기 위한 `SDK`입니다. 반드시 설치해주셔아합니다.
`WinDBG`는 커널 디버깅을 할 때 반드시 필요한 디버거입니다. 반드시 설치해주시길 바랍니다.
`Dbgview`는 게스트 컴퓨터에 설치하는 툴인데 DbgPrintEx함수를 이용해서 드라이버가 메모리에 올라갔는지 내려갔는지 간단하게 체크할 수 있습니다. 설치하셔도 되고 설치하지 않으셔도 딱히 문제는 없습니다.

#### 2) 디버깅 설정

> 1. Windbg를 실행시킵니다.
> 2. [File] 탭에 Kernel Debugging 탭(Ctrl + k)으로 들어가서 [COM] 탭으로 들어갑니다.
> 3. [pipe] 와 [Reconnect] 체크, Port 의 값을 아까 설정한 \\.\pipe\Windows7 로 바꿉니다.
> 4. 설정해주시고 [Debug] 탭에서 Break 를 눌러주시면 잘 작동하는 모습을 볼 수 있습니다.

![게스트 컴퓨터 환경](D:\Git Blog\_posts\커널 단으로 들어가다 이미지\커널 디버거.png)

하나의 팁을 드리자면 여기까지 따라오신 분은 Guest Computer의 이상한 현상을 눈치챘을 것 입니다.
갑자기 아무런 입력도 먹지 않고 완전 `멈춘 듯`한 상태로 변합니다.

### 3) tip

##### kd> g (Debugee를 다시 Running 상태로 돌려주는 명령어입니다.)
##### Ctrl + Break를 누르면 다시 Debugging 상태로 바뀝니다.

---

### 이로써 여러분들은 저와 같이 SSDT 후킹 실습을 진행할 준비를 마치셨습니다.

## 3. 원리 & 증상 설명

![게스트 컴퓨터 환경](D:\Git Blog\_posts\커널 단으로 들어가다 이미지\작업관리자.png)

taskmgr.exe(작업 관리자)에서 프로세스 목록을 가져올 때 `zwquerysysteminformation` 함수를 사용합니다.
우리는 SSDT 후킹을 이용해서 bbolmin이라는 문자열이 들어간 프로세스의 이름을 숨겨보고 진짜 SSDT 후킹이 됬는지 확인해볼 것입니다.



---

### 3.1 원리

일단 SSDT 후킹을 알기 위해서 필수적으로 알아야할 지식들이 있습니다.

> ##### 1. 유저 모드와 커널 모드
> ##### 2. Windows API의 함수의 내부 처리 과정
> ##### 3. SSDT란 무엇인가?

#### 3.1.1 유저 모드와 커널 모드

유저 애플리케이션이 운영체제에 치명적인 데이터에 접근하여 수정하거나 삭제하지 못하게 막기 위해 윈도우는 두가지 프로세서 접근 모드를 지원합니다. 바로 `유저 모드` 와 `커널 모드` 입니다.
당연히 유저 어플리케이션은 유저 모드에서만, 운영체제 코드(시스템 서비스, 디바이스 드라이버)는 커널 모드에서 실행이 됩니다.
`커널 모드`는 모든 시스템 메모리와 모든 CPU 인스트럭션에 접근이 허가된 프로세스 실행 모드를 말합니다.

즉 프로세서는 유저 모드보다 커널 모드에 높은 권한을 줌으로써 오동작을 유발하는 유저 어플리케이션등이 시스템 전체에 안전성을 해치지 않게 보장하는 필수 기반을 운영체제 설계자에게 제공합니다.

#### 3.1.2 API가 무엇이고 처리 과정은 어떻게 될까요?


API애 대해서 간단히 설명하자면,API(Application Programming Interface, 응용 프로그램 프로그래밍 인터페이스)는 응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻합니다.
이런 API가 제공하는 함수들을 이용해서 메모리, 파일, 네트워크, 비디오, 사운드 등 시스템 자원에 접근할 수 있습니다.

##### 그런 API에서도 흐름이 있습니다. 네 프로그램이 실행되는 과정처럼 그 흐름이요.

---

간단한 예시를 들어보겠습니다.

우리가 `OpenFile` 이라는 함수를 호출한다고 가정합시다.

이 두가지 사진을 보고 여러분들이 호출 과정을 연상해주세요!

![게스트 컴퓨터 환경](D:\Git Blog\_posts\커널 단으로 들어가다 이미지\시스템 호출 과정.png)

---

![게스트 컴퓨터 환경](D:\Git Blog\_posts\커널 단으로 들어가다 이미지\SSDT 원리.png)

---

> 1. User Code에서 Kernel32.dll에서의 OpenFile 호출
> 2. Kernel32.dll에서의 OpenFile은 Ntdll.dll의 NtOpenFile 함수 호출
> 3. Ntdll.dll 의 NtOpenFile 함수는 Eax에 OpenFile에 해당하는 system call number를 저장 후 INT 2E나 SYSENTER 명령어를 이용해서 커널 모드에 접근합니다.
> 4. KeServiceDescriptorTable을 참조해서 Eax 레지스터에 저장된 system call number에 해당 함수의 주소를 얻어 해당 주소 호출

---

#### 3.1.3 SSDT란 무엇입니까?

SSDT(System Service Descriptor Table), 시스템 서비스 서술자 테이블이라 불립니다.
SSDT 후킹 기술은 윈도우 루트킷 혹은 백신에서 사용됩니다.
시스템 콜을 처리하기 위한 함수를 찾을 때 사용하는 테이블이라 보면됩니다.

---

### 3.2 후킹되어야할 부분은 어디일까? 

두 번째 사진의 `KiServiceTable(SSDT)`의 값을 바꿔서 자신의 원하는 함수를 호출한 후, 본래 호출하려던 함수를 호출하면 됩니다.

---

### 3.3 코드

자 그렇다면 알아야할 원리도 알았고 후킹되어야할 부분도 예상이 가겠다. 직접 코드를 만들어서 실습을 해봅시다!

---

#### 3.3.1 메모리 보호 해제

`SSDT`는 Read Only로 설정되어 있기 때문에 값을 바꿀 수 없습니다.
당연히 SSDT 후킹을 하기 위해서는 쓰기 권한이 필요하고 이를 우회하기 위한 방법 중에 CR0 Register를 이용하는 방법에 대해 알아봅시다.
CR0 레지스터는 WP(Write Protect) Bit를 포함하고 있는데 이 값이 `0`이면 메모리 보호 기능이 해제되고 `1`이면 보호 기능이 활성화됩니다.

자 소스코드와 설명을 봅시다.

<pre>

#define WP_MASK 0x0FFFEFFFF  //WP bit mask

VOID Set_Write(VOID) // Write 권한 활성화
{
	__asm {
		push eax;
		mov eax, cr0;
		and eax, WP_MASK;
		mov cr0, eax;
		pop eax;
	}
}

VOID Set_Read(VOID) // Write 권한 비활성화
{
	__asm {
		push eax;
		mov eax, cr0;
		or eax, not WP_MASK;
		mov cr0, eax;
		pop eax;
	}
}

</pre>

##### 개인적인 의견과 판단이 들어있습니다.(잘 사용해주시길 ^^)

C언어에 CR0 Register의 값을 바꾸는 함수가 없나봅니다. `Inline Assembly`를 이용하네요.

and eax, WP_MASK를 통해서 권한을 활성화하고 or eax, NOT WP_MASK를 통해서 다시 비활성화 시켜주네요.

흔적을 안 남기기 위해 연산해주는 모습을 보여주네요.

여기서 코드의 흐름을 예상해보면

> Write 권한 활성화 -> SSDT 후킹 -> SSDT 후킹 해제 -> WRite 권한 비활성화

이런 식으로 진행이 되겠죠?

---

#### 3.3.2 SSDT 후킹에 도움이 되는 매크로

<pre>

#define SYSTEM_SERVICE(_Func) KeServiceDescriptorTable.ServiceTableBase[SYSCALL_INDEX(_Func)]
#define SYSCALL_INDEX(_Func) *(PULONG) ((PUCHAR)_Func+1)

</pre>

"SYSTEMSERVICE" 매크로는 ntoskrnl.exe에서 제공하는 `Zw* 함수`의 주소를 입력받아 그에 상응하는 `Nt* 함수`의 주소를 SSDT에서 구할 때 사용합니다.
이렇게 "SYSTEMSERVICE"와 "SYSCALL_INDEX" 매크로가 해당 함수의 시작 부분(_func)에 +1을 하는 이유는 opcode에 따라 
[mov eax, 인덱스 값] 이므로 해당 인덱스 값은 함수의 시작점에서 mov eax의 opcode 값 다음에 오므로 +1을 더해 해당 값을 알 수 있기 
때문입니다.
이 두 매크로를 통해 각각 Nt* 함수의 주소와 인덱스 번호를 구할 수가 있습니다.


---

#### 3.3.2.1 쉬는 시간

여기에서 `zw* 함수가 무엇입니까?`라고 질문할 수 있습니다!!
OpenFile 함수를 사용한다고 해봅시다.
NtOpenFile로 바로 호출할 수 있을까요?
아니요. `Zw*` 함수를 거쳐서 `Nt*` 함수로 접근합니다.

##### 하나만 기억하세요.

##### NT 함수를 호출하려면 Zw 함수부터 호출해야된다.

---

#### 3.3.3 매크로

<pre>

#define HOOK_SYSCALL(CurrentFunc, ChangeFunc) InterlockedExchange((PLONG)&SYSTEM_SERVICE(CurrentFunc), (LONG)ChangeFunc)

</pre>

HOOK_SYSCALL 매크로는 후킹을 수행할 Zw* 함수의 주소와 SSDT에서의 인덱스, 그리고 새로운 HookFunc 함수의 주소를 이용해 SSDT 안에서의 주소를 변경해줍니다.
코드 중에서 "InterlockedExchange"가 있는데 이는 두 개의 인자 값이 일치하지 않을 경우 첫 번째 인자가 지정하는 메모리의 값을 두 번째 인자로 바꾸는 함수입니다.

---

#### 3.3.4 DriverEntry와 UnLoad 함수

Windows Device Driver라는 프레임워크가 있습니다. 커널 모드에서 동작하는 프로그램(드라이버)를 만들고 싶을 때 사용합니다.

`DriverEntry` 함수 같은 경우는 C언어의 Main 함수와 같은 존재입니다.
드라이버가 메모리에 상주할 때 어떠한 행위를 할지 정의할 때 쓰입니다.

`UnLoad` 함수 같은 경우 개념을 조금 섞어서 설명하자면 소멸자라 생각하면 되겠습니다.
메모리에서 내려올 때 어떠한 행위를 할지 정의할 때 쓰입니다.

---

### 4. 출처와 나머지 설명에 대한 정리

여러분들께 이런 포스트를 보여드리기 위해서 수 많은 책과 글을 검색하면서 제 생각을 확립하고 실습을 진행하면서 성장하고 있구나 하는 느낌을 받았습니다.
코드에 대한 설명을 제가 이 포스트 안에 전부 정리할려면 굉장히 오래 걸릴 것 같습니다.

반드시 알아야될 개념도 간략하게 설명했고 코드도 띄엄 띄엄 설명한 터라 제 설명만으로는 부족할 것입니다.

#### 제가 적어도 한 달 안에는 이 글을 다시 업데이트 하겠습니다.

출처입니다 ^^ 글 쓰면서 굉장히 도움됬습니다.

체계도 다시 잡고 사진도 다시 이슈에 올려서 활성화하고 템플릿도 다시 만드는게 좋겠네요 ㅎㅎ

[http://bbolmin.tistory.com/158?category=580395](http://bbolmin.tistory.com/158?category=580395)
[http://kali-km.tistory.com/entry/System-Call-SSDT-Hooking?category=490391](http://kali-km.tistory.com/entry/System-Call-SSDT-Hooking?category=490391)
[http://hackerspace.tistory.com/entry/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C-%EC%B2%98%EB%A6%AC%EC%88%9C%EC%84%9C](http://hackerspace.tistory.com/entry/%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C-%EC%B2%98%EB%A6%AC%EC%88%9C%EC%84%9C)
책 : 루트킷 윈도우 커널 조작의 미학
